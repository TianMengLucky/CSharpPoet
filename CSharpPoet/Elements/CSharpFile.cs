namespace CSharpPoet;

/// <summary>
/// Represents a C# file.
/// </summary>
public class CSharpFile : CSharpMember<CSharpFile.IMember>
{
    /// <summary>
    /// Gets or sets header.
    /// </summary>
    public Action<CodeWriter>? Header { get; set; }

    /// <summary>
    /// Gets usings.
    /// </summary>
    public IList<CSharpUsing> Usings { get; set; } = new List<CSharpUsing>();

    /// <summary>
    /// Gets or sets namespace.
    /// </summary>
    public CSharpNamespace? Namespace { get; set; }

    /// <summary>
    /// Initializes <see cref="CSharpFile"/>.
    /// </summary>
    public CSharpFile()
    {
    }

    /// <summary>
    /// Initializes <see cref="CSharpFile"/> with a namespace.
    /// </summary>
    public CSharpFile(string @namespace)
    {
        Namespace = new CSharpNamespace(@namespace);
    }

    /// <summary>
    /// Initializes <see cref="CSharpFile"/> with a <see cref="CSharpNamespace"/>.
    /// </summary>
    public CSharpFile(CSharpNamespace @namespace)
    {
        Namespace = @namespace;
    }

    /// <inheritdoc />
    public override void WriteTo(CodeWriter writer)
    {
        if (writer == null) throw new ArgumentNullException(nameof(writer));

        writer.WriteLine("// <auto-generated>");
        writer.WriteLine();

        Header?.Invoke(writer);

        if (Usings.Any())
        {
            writer.WriteMembers(Usings);
            writer.WriteLine();
        }

        if (Namespace != null)
        {
            writer.Write("namespace ");
            writer.Write(Namespace.Name);
            writer.WriteLine(";");
            writer.WriteLine();

            Namespace.WriteUsingsTo(writer);
        }

        writer.WriteMembers(Members);
    }

    /// <summary>
    /// Represents a member of <see cref="CSharpFile"/>.
    /// </summary>
    public interface IMember : ICSharpMember
    {
    }
}
